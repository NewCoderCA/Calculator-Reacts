'use strict';
const {constants: BufferConstants} = require('buffer');
<<<<<<< HEAD
const pump = require('pump');
const bufferStream = require('./buffer-stream');

=======
const stream = require('stream');
const {promisify} = require('util');
const bufferStream = require('./buffer-stream');

const streamPipelinePromisified = promisify(stream.pipeline);

>>>>>>> c44593b6709b876680f0aaf44f5e874771f4a0cb
class MaxBufferError extends Error {
	constructor() {
		super('maxBuffer exceeded');
		this.name = 'MaxBufferError';
	}
}

async function getStream(inputStream, options) {
	if (!inputStream) {
<<<<<<< HEAD
		return Promise.reject(new Error('Expected a stream'));
=======
		throw new Error('Expected a stream');
>>>>>>> c44593b6709b876680f0aaf44f5e874771f4a0cb
	}

	options = {
		maxBuffer: Infinity,
		...options
	};

	const {maxBuffer} = options;
<<<<<<< HEAD

	let stream;
=======
	const stream = bufferStream(options);

>>>>>>> c44593b6709b876680f0aaf44f5e874771f4a0cb
	await new Promise((resolve, reject) => {
		const rejectPromise = error => {
			// Don't retrieve an oversized buffer.
			if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
				error.bufferedData = stream.getBufferedValue();
			}

			reject(error);
		};

<<<<<<< HEAD
		stream = pump(inputStream, bufferStream(options), error => {
			if (error) {
				rejectPromise(error);
				return;
			}

			resolve();
		});
=======
		(async () => {
			try {
				await streamPipelinePromisified(inputStream, stream);
				resolve();
			} catch (error) {
				rejectPromise(error);
			}
		})();
>>>>>>> c44593b6709b876680f0aaf44f5e874771f4a0cb

		stream.on('data', () => {
			if (stream.getBufferedLength() > maxBuffer) {
				rejectPromise(new MaxBufferError());
			}
		});
	});

	return stream.getBufferedValue();
}

module.exports = getStream;
<<<<<<< HEAD
// TODO: Remove this for the next major release
module.exports.default = getStream;
=======
>>>>>>> c44593b6709b876680f0aaf44f5e874771f4a0cb
module.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});
module.exports.array = (stream, options) => getStream(stream, {...options, array: true});
module.exports.MaxBufferError = MaxBufferError;
