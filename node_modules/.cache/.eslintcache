[{"/Users/pineapple/Desktop/Calculator-Reacts/src/index.js":"1","/Users/pineapple/Desktop/Calculator-Reacts/src/App.js":"2","/Users/pineapple/Desktop/Calculator-Reacts/src/OperationButton.js":"3","/Users/pineapple/Desktop/Calculator-Reacts/src/DigitButton.js":"4"},{"size":432,"mtime":1647554066780,"results":"5","hashOfConfig":"6"},{"size":4899,"mtime":1647554066779,"results":"7","hashOfConfig":"6"},{"size":231,"mtime":1647554066779,"results":"8","hashOfConfig":"6"},{"size":206,"mtime":1647554066779,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ga84bg",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pineapple/Desktop/Calculator-Reacts/src/index.js",[],[],"/Users/pineapple/Desktop/Calculator-Reacts/src/App.js",["23","24","25","26","27"],[],"import logo from './logo.jpeg';\nimport image from './flagAfrica.png';\nimport styles from './styles.css';\nimport { useReducer } from 'react';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OperationButton';\n\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\n\nfunction reducer(state, { type, payload }) {\n  switch(type) {\n    case ACTIONS.ADD_DIGIT:\n      if(state.overwrite) { \n        return {\n          ...state,\n          currentSum: payload.digit,\n          overwrite: false,\n        }\n      }\n      if(payload.digit === '0' && state.currentSum === '0') return state;\n      if(payload.digit === '.' && state.currentSum.includes('.')){\n        return state;\n      }\n      return {\n        ...state, currentSum: `${state.currentSum || ''}${payload.digit}`\n      }\n    case ACTIONS.CHOOSE_OPERATION: \n      if(state.currentSum == null && state.previousSum == null) {\n        return state;\n      }\n      if(state.currentSum == null){\n        return {\n          ...state, operation: payload.operation\n        }\n      }\n      if(state.previousSum == null) {\n          return {\n            ...state, operation: payload.operation, previousSum: state.currentSum, currentSum: null\n          }\n      }\n      return {\n        ...state, previousSum: evaluate(state), operation: payload.operation, currentSum: null\n      }\n    case ACTIONS.CLEAR: \n      return {};\n    case ACTIONS.DELETE_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentSum: null\n        }\n      }\n      if(state.currentSum == null) return state;\n      if(state.currentSum.length == 1) \n        return { \n        ...state, \n        currentSum: null \n      }\n      return {\n        ...state,\n        currentSum: state.currentSum.slice(0, -1)\n      }\n      return {};\n    case ACTIONS.EVALUATE:\n      if (state.operation == null || state.currentSum == null || state.previousSum == null) {\n        return state;\n      }\n      return {\n        ...state,\n        operation: null,\n        previousSum: null,\n        overwrite: true,\n        currentSum:evaluate(state)\n      }\n  };\n}\n\n\nfunction evaluate({ currentSum, previousSum, operation }) {\n  const previous = parseFloat(previousSum);\n  const current = parseFloat(currentSum);\n  if (isNaN(previous) || isNaN(current)) return '';\n\n  let computation = '';\n  switch(operation) {\n    case '+': computation = previous + current;\n    break;\n    case '-': computation = previous - current;\n    break;\n    case '*': computation = previous * current;\n    break;\n    case 'รท': computation = previous / current;\n    break;\n  }\nreturn computation.toString();\n}\n\nconst INTEGER_FORMAT = new Intl.NumberFormat('en-us', {\n  maximumFractionDigits: 0,\n})\nfunction formatNumbers(number){\n  if(number == null) \n  return\n  const [integer, decimal] = number.split('.')\n  if (decimal == null)\n  return INTEGER_FORMAT.format(integer)\n  return `${INTEGER_FORMAT.format(integer)}.${decimal}`\n\n}\n\n\nfunction App() {\n  const [{ currentSum, previousSum, operation }, dispatch] = useReducer(reducer, {});\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n       <nav className='App-nav'><img src={image} className='flagAfrica' alt='African continent containing African flags' />\n        <h1>Quick Maths!</h1>\n        <img src={logo} className='App-logo' alt='Calculator logo' /></nav>\n      </header>\n\n    <div className='calculator-grid'>\n      <div className='output'>\n      <div className='previous-sum'>{formatNumbers(previousSum)} {operation}</div>\n      <div className='current-sum'>{formatNumbers(currentSum)}</div>\n    </div>\n   \n      <button className='span-two' onClick={() => dispatch({ type: ACTIONS.CLEAR })}>Clear</button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>Delete </button>\n      <OperationButton operation='รท' dispatch={dispatch} />\n      <DigitButton digit='1' dispatch={dispatch} />\n      <DigitButton digit='2' dispatch={dispatch} />\n      <DigitButton digit='3' dispatch={dispatch} />\n      <OperationButton operation='*' dispatch={dispatch} />\n      <DigitButton digit='4' dispatch={dispatch} />\n      <DigitButton digit='5' dispatch={dispatch} />\n      <DigitButton digit='6' dispatch={dispatch} />\n      <OperationButton operation='+' dispatch={dispatch} />\n      <DigitButton digit='7' dispatch={dispatch} />\n      <DigitButton digit='8' dispatch={dispatch} />\n      <DigitButton digit='9' dispatch={dispatch} />\n      <OperationButton operation='-' dispatch={dispatch} />\n      <DigitButton digit='.' dispatch={dispatch} />\n      <DigitButton digit='0' dispatch={dispatch} />\n      <button className='span-two' onClick={() => dispatch ({ type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n</div>  \n  );\n}\n\nexport default App;\n","/Users/pineapple/Desktop/Calculator-Reacts/src/OperationButton.js",[],[],"/Users/pineapple/Desktop/Calculator-Reacts/src/DigitButton.js",[],[],{"ruleId":"28","severity":1,"message":"29","line":3,"column":8,"nodeType":"30","messageId":"31","endLine":3,"endColumn":14},{"ruleId":"32","severity":1,"message":"33","line":19,"column":3,"nodeType":"34","messageId":"35","endLine":84,"endColumn":4},{"ruleId":"36","severity":1,"message":"37","line":63,"column":34,"nodeType":"38","messageId":"39","endLine":63,"endColumn":36},{"ruleId":"40","severity":1,"message":"41","line":72,"column":7,"nodeType":"42","messageId":"43","endLine":72,"endColumn":17},{"ruleId":"32","severity":1,"message":"33","line":94,"column":3,"nodeType":"34","messageId":"35","endLine":103,"endColumn":4},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode"]